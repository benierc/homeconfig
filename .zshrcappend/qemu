source ~/.zshrcappend/nettools

function get_image {
 	ls | grep -E "^(redpesk.raw|Redpesk-OS.img)$"
}

function get_initrd {
	ls | grep -E "initramfs" || virt-get-kernel -a Redpesk-OS.img &> /dev/null
}

function start_qemu_x86_64 {
	QEMU_ARCH=x86_64
	CONSOLE=ttyS0
	start_qemu $@ -enable-kvm -cpu kvm64 -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt -initrd $(get_initrd)
}

function start_qemu_aarch64 {
	QEMU_ARCH=aarch64
	CONSOLE=ttyAMA0

	local QEMU_ARGS=()
	bsp_1="renesas-gen3"
	bsp_2="imx8|solidrun-edge-gateways|solidrun-hummingboard"
	bsp_3="rpi|layerscape"
	bsps=$(echo "$bsp_1|$bsp_2|$bsp_3")
	echo $bsps

	while [ "$1" ]; do
		case $1 in
			--bsp)
				BSP=$(echo $bsps | tr '|' '\n' | fzf)
				;;
			*)
				QEMU_ARGS+=$1
				;;
		esac
		shift
	done

	if [[ $BSP =~ ^($bsp_1)$ ]]; then
		start_qemu --rootpath /dev/vda4 ${QEMU_ARGS[@]} -M accel=tcg,type=virt -cpu cortex-a57
	elif [[ $BSP =~ ^($bsp_2)$ ]]; then
		start_qemu --rootpath /dev/vda4 ${QEMU_ARGS[@]} -M accel=tcg,type=virt -cpu cortex-a72
	elif [[ $BSP =~ ^($bsp_3)$ ]]; then
		start_qemu --rootpath /dev/vda5 ${QEMU_ARGS[@]} -M accel=tcg,type=virt -cpu cortex-a72
	else
		start_qemu ${QEMU_ARGS[@]} -M accel=tcg,type=virt -cpu cortex-a57 -initrd $(get_initrd)
	fi
}

function start_qemu {
	SECURITY=smack
	ROOT_PATH="LABEL=rootfs"
	SSH_PORT=3333
	local Q_DISPLAY="-display none"

	local QEMU_ARGS=()
	while [ "$1" ]; do
		case $1 in
			-p | --port) shift
				SSH_PORT=$1
				;;
			-r | --rootpath) shift
				ROOT_PATH=$1
				;;
			-s | --security) shift
				SECURITY=$1
				;;
			-b | --break) shift
				rdbreakchoice="cmdline\npre-udev\npre-trigger\ninitqueue\npre-mount\nmount\npre-pivot\ncleanup"
				EXTRA_ARGS="${EXTRA_ARGS} rd.break=$(echo -e $rdbreakchoice | fzf --prompt='rd.break choices')"
				;;
			 *)
				QEMU_ARGS+=$1
				;;
		esac
		shift
	done

 	# be sure SSH_PORT is available
 	while nc localhost $SSH_PORT -w 1; do
        SSH_PORT=$((SSH_PORT+1))
 	done

	ssh-keygen -R "[localhost]:${SSH_PORT}" || :

	local IMAGE=$(get_image)
 	set -x
 	qemu-system-${QEMU_ARCH} \
 		-kernel $(ls | grep -E "vmlinuz|Image|kernel") \
 		-hda $IMAGE \
 		-m 2048 \
 		-smp 4 \
 		-device virtio-rng-pci \
		$Q_DISPLAY \
	    -serial mon:stdio \
 		-net nic \
 		-net user,hostfwd=tcp::${SSH_PORT}-:22 \
 		${QEMU_ARGS[@]} \
 		-append 'console='"$CONSOLE"' cgroup_no_v1=all systemd.unified_cgroup_hierarchy=1 rw rootwait security='"${SECURITY}"' root='"${ROOT_PATH}"' '"${EXTRA_ARGS}"' loglevel=7'
 }

function qemu_grub {
	OVMF="/usr/share/OVMF/x64/OVMF_CODE.fd"
	SSH_PORT=4444
	ssh-keygen -R "[localhost]:${SSH_PORT}" || :

	echo ok
	qemu-system-x86_64 \
	    -hda "Redpesk-OS.img" \
	    -enable-kvm -m 2048 \
	    -cpu kvm64 \
	    -cpu qemu64,+ssse3,+sse4.1,+sse4.2,+popcnt \
	    -smp 4 \
	    -vga virtio \
	    -device virtio-rng-pci \
	    -serial mon:stdio \
	    -serial null \
	    -net nic \
	    -net user,hostfwd=tcp::$PORT_SSH-:22 \
	    -bios $OVMF
}

function ssh_qemu {
	local user=$1
	[ $user ] || user=root
	local port=$(lsof_i qemu | grep '*:' | awk '{print $9}' | sed 's/*://' | fzf)
	set -x
	ssh-copy-id -p $port $user@localhost 2> /dev/null
	ssh $user@localhost -p $port
}

function set_latest_silo_generic {
}
