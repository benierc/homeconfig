source ~/.zshrcappend/backgrounds
source ~/.zshrcappend/misc


CACHERPCLI=/tmp/rpclicache
mkdir -p $CACHERPCLI

DIR_REDPESKCLI=~/repos/git.ovh.iot/redpesk-cli/bin
export PATH="${DIR_REDPESKCLI}:$PATH"

# get zsh completion
[ -d $DIR_REDPESKCLI ] && [ ! -f $DIR_REDPESKCLI/_rp-cli ] && $DIR_REDPESKCLI/rp-cli completion zsh > $DIR_REDPESKCLI/_rp-cli

fpath=($DIR_REDPESKCLI $fpath)

function getpkgname {
	echo "$@" | tr '[:upper:]' '[:lower:]'
}

alias rpclif='rp-cli --serveralias factory'
alias rpclidn='rp-cli --serveralias distro'
alias rpclic='rp-cli --serveralias community'
alias rpclithales='rp-cli --serveralias thales'

function _rpcli_ {
	echo "+ rp-cli $*" >&2
	rp-cli --nopager $@
}

alias _rpclif='_rpcli_ --serveralias factory'
alias _rpclidn='_rpcli_ --serveralias distro'
alias _rpclic='_rpcli_ --serveralias community'
alias _rpclithales='_rpcli_ --serveralias thales'

function rpclidn_build {
	local distro=$1 project=$2 app=$(echo $3 | tr '[:upper:]' '[:lower:]')
	shift 3
	_rpclidn applications build -d $distro -p $project $app $@
}

alias rpclidnbuildbatz='rpclidn_build redpesk-lts-batz-2.0-update'
alias rpclidnbuildbatz21='rpclidn_build redpesk-lts-batz-2.1-update'
alias rpclidnbuildarz11='rpclidn_build redpesk-lts-arz-1.1'
alias rpclidnbuildautosd='rpclidn_build redpesk-autosd-9'

function reset_cacherpcli {
	rm -fr $CACHERPCLI
	mkdir -p $CACHERPCLI
}

function rpclidn_projects {
	local listprojects=$CACHERPCLI/listprojects
	[ -f $listprojects  ] || _rpclidn --nopager projects list > $listprojects
	cat $listprojects | awk '{print $2}' | tail -n+2
}

function rpclidn_appdistros {
	local project=$1 app=$(echo $2 | tr '[:upper:]' '[:lower:]')
	_rpclidn --rawoutput applications get -p $project $app  | jq -r '.distros[] | select(.set == true) | .slug'
}

function rpclidn_append_optionnal_distro {
	local distro=$1 project=$2 app=$(echo $3 | tr '[:upper:]' '[:lower:]')
	distros=$(rpclidn_appdistros $project $app)

	distros="$distro,$(echo $distros | tr ' ' ',')"
	_rpclidn applications update --optional-distro $distros -p $project $app
}

function rpclidn_remove_optionnal_distro {
	local distro=$1 project=$2 app=$(echo $3 | tr '[:upper:]' '[:lower:]')
	local distros=$(rpclidn_appdistros $project $app)
	! echo $distros | grep $distro && echo "no distro=$distro for $app, no update" && return 0

	distros=$(echo $distros | sed "s/redpesk-autosd-9\s*//" | tr ' ' ',' | sed 's/,$//')
	_rpclidn applications update --optional-distro $distros -p $project $app
}

function rpclidn_listapps {
	local project=$1
	_rpclidn --nopager applications list -p $project | tail -n+2 | awk '{print $2}'
}

function rpclidn_listappsuuid {
	local project=$1
	_rpclidn --nopager applications list -p $project | tail -n+2 | awk '{print $1}'
}

function rpclidn_buildproject {
	local distro=$1
	local project=$2
	for app in $(rpclidn_listappsuuid $project); do
		rpclidn_build $distro $project $app --nonblocking
	done
}

function rpclidn_removedistroproject {
	local distro=$1
	local project=$2

	for i in $(rpclidn_listappsuuid $project); do
		rpclidn_remove_optionnal_distro $distro $project $i
		#wait_slot 1
	done
}

function rpclidn_distros {
	_rpclidn --rawoutput distributions list | jq -r '.data[].slug'
}

function rpclidn_addappsrpm {
	local project=$1
	local branch=$2
	local url=$3
	local description=$4
	local srpm=$(basename $url)
	local pkg=$(echo $srpm | sed -r "s/(.+)-([^-])+-([^-])+/\1/")

	local rhelversion=
	local tag=

	[[ "$(echo $url | awk -F '/' '{print $4}')" == "redhat" ]] && rhelversion=$(echo "$url" | awk -F '/' '{print $6}')
	[ "$rhelversion" ] && tag="import-$rhelversion/$srpm"

	local rpdistro=$(rpclidn_distros | grep $branch)
	[ -z "$rpdistro" ] && echo "no rpdistro found" && return 1

	local descarg=()
	[ "$description" ] && descarg+="--description=$description"

	rpclidn applications add --project $project --name $pkg --pkg-name $pkg \
		--active-branch=$branch \
		--build-type=accel_build_cross \
		--optional-distro $rpdistro \
		${descarg[@]} \
		--service "import_srpm={'url':'$url', 'tag':'$tag', 'branch':'$branch'}" \
		--service "setverrel={'version':false, 'release':false}"
}

function rpclidn_addapp_fromsearch {
	local rhelver=$1
	local branch=$2
	local project=$3
	local search=$4

	local url=$(dnfsilo $rhelver download --source --url "$search" | tail -n 1)

	local pkgname=$(echo $url | awk -F '/' '{print $NF}' | sed -r "s/-[^-]+-[^-]+.src.rpm$//")
	local summary=$(dnfsilo $rhelver info $pkgname | grep Summary | tail -n 1 | awk -F ': ' '{print $2}')

	echo "pkgname=$pkgname"
	echo "description=$summary"
	echo "url=$url [Y/n]"
	local ok=
	read ok
	[[ "$ok" == "n" ]] && return 1

	rpclidn_addappsrpm $project $branch $url ''"$summary"''
}

function rpclidn_setverrelfalse {
	local branch=$1
	local project=$2
	local pkgname=$(getpkgname $3)

	rpclidn applications branch  --project $project $pkgname --destination $branch || return 1
	rpclidn applications update  --project $project $pkgname \
		--service "setverrel={'version':false, 'release':false}"
}

function rpclidn_updatepj_desc {
	local rhelver=$1
	local project=$2

	local IFS=$'\n'; for app in $(_rpclidn applications list --project $project | tail -n +2); do
		echo $app
		local appid=$(echo $app | awk '{print $1}')
		local slug=$(echo $app | awk '{print $3}')
		local summary=$(dnfsilo $rhelver info $slug | grep Summary | tail -n 1 | awk -F ': ' '{print $2}')

		echo "found for slug=$slug summary=$summary"
		rpclidn applications update $appid --description ''"$summary"''
	done
}
